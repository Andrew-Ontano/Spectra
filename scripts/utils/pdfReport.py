#!/usr/bin/env python3

from reportlab.lib.pagesizes import letter
from reportlab.lib.units import inch
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Image, PageBreak, Table
from reportlab.lib.styles import getSampleStyleSheet
import os
import argparse

def imagePrep(path,width=6.5 * inch, height=9 * inch):
    outImage = Image(path)
    outImage._restrictSize(width, height)
    return outImage
def make_report(output_pdf, image_dir, mer, prefix):
    # Set up document
    doc = SimpleDocTemplate(output_pdf, pagesize=letter)
    story = []
    styles = getSampleStyleSheet()

    # Header details
    story.append(Paragraph(f"<b>Spectra pipeline output report:</b> The following figures were auto-generated by the Spectra pipeline. These figures show the relationship between kmers in raw sequence data and in a genome assembly. These figures were generated with a random sampling of kmers.", styles["Normal"]))

    story.append(Spacer(1, 0.1 * inch))

    story.append(Paragraph(f"<b>K={args.mer_size} distributions:</b> Kmer prevalence (left) in raw data [x-axis, log-scale] against prevalence in assembled data [y-axis, log-scale]. Kmer prevalence (right) when filtered for the top and bottom 5% of kmers by shift in abundance between datasets", styles["Normal"]))

    row = [imagePrep(path=os.path.join(image_dir, f"{prefix}_kmer_comp_k{mer}_scatter.png"), width=3.75 * inch,
                     height=4.5 * inch),
           imagePrep(path=os.path.join(image_dir, f"{prefix}_kmer_comp_k{mer}_scatter_extreme_5pct.png"),
                     width=3.75 * inch, height=4.5 * inch)]
    table = Table([row], colWidths=[3.75 * inch, 3.75 * inch])
    story.append(table)

    story.append(Spacer(1, 0.1 * inch))

    story.append(Paragraph(f"<b>K={mer} abundance shift:</b> log-fold change in kmer representation between raw and assembled data. Peaks in change should roughly corroborate the sequencing coverage of the genome.", styles["Normal"]))

    story.append(Spacer(1, 0.1 * inch))

    story.append(imagePrep(path = os.path.join(image_dir, f"{prefix}_kmer_comp_k{mer}_density.png"), width = 6 * inch, height = 3 * inch))

    story.append(PageBreak())

    story.append(Paragraph(
        f"<b>K={mer} abundance density:</b> Kernal density estimation (left) and violin plots (right) of kmers in raw [blue] and assembled [orange] data. Graphical estimations might not be smoothed depending on the data's composition.",
        styles["Normal"]))

    row = [
        imagePrep(path=os.path.join(image_dir, f"{prefix}_kmer_comp_k{mer}_back2back_density.png"), width=3.75 * inch,
                  height=4.5 * inch),
        imagePrep(path=os.path.join(image_dir, f"{prefix}_kmer_comp_k{mer}_violin.png"), width=3.75 * inch,
                  height=4.5 * inch)]
    table = Table([row], colWidths=[3.75 * inch, 3.75 * inch])
    story.append(table)

    story.append(Spacer(1, 0.1 * inch))

    story.append(Paragraph(
        f"<b>K{mer} empirical cumulative distribution:</b> Measure of how many kmers (and their cumulative probability) are observed at each sequential log-fold change in frequency.",
        styles["Normal"]))

    story.append(Spacer(1, 0.1 * inch))

    story.append(imagePrep(path = os.path.join(image_dir, f"{prefix}_kmer_comp_k{mer}_ecdf.png"), width = 6 * inch, height= 3 * inch))
    story.append(PageBreak())

    story.append(Paragraph(
        f"<b>Sequence-specific spectra breakdowns:</b> the following pages are a breakdown of spectra (K=3 mer distribution) and the K={mer} localization of exact kmer matches for highest 5% and lowest 5% in abundance change. Spectra plots show the 64 K=3 mers. Each page will have: high-abundance kmers(top), spectra (middle), and low abundance (bottom). K={mer} abundance plots are not to scale.",
        styles["Normal"]))

    story.append(Spacer(1, 0.5 * inch))

    sequenceNames = [f[len(args.prefix) + 13:-4] for f in os.listdir(args.directory) if (
                os.path.isfile(os.path.join(args.directory, f)) and f[len(args.prefix) + 1:].startswith("spectra"))]
    for sequence in sequenceNames:
        story.append(Paragraph(
            f"<b>Sequence {sequence}:</b>", styles["Normal"]))
        story.append(Spacer(1, 0.3 * inch))
        story.append(imagePrep(path = os.path.join(image_dir, f"{prefix}_mass.png_{sequence}_high.png"), width = 6.5 * inch, height = 4 * inch))
        story.append(Spacer(1, 0.1 * inch))
        story.append(
            imagePrep(path=os.path.join(image_dir, f"{prefix}_spectra.png_{sequence}.png"), width=6.5 * inch,
                      height=4 * inch))
        story.append(Spacer(1, 0.1 * inch))
        story.append(
            imagePrep(path=os.path.join(image_dir, f"{prefix}_mass.png_{sequence}_low.png"), width=6.5 * inch,
                      height=4 * inch))
        story.append(PageBreak())

    # Build PDF
    doc.build(story)

# CLI arguments
parser = argparse.ArgumentParser(description='Spectra pipeline report writer')
parser.add_argument('-i', '--image-directory', dest='directory', type=str, help='Input image directory', required=True)
parser.add_argument('-o', '--output', dest='output', type=str, help='Output pdf filename', default='spectra_report.pdf')
parser.add_argument('-m', '--mer-size', dest='mer_size', type=int, help='kmer size ran.', default=20)
parser.add_argument('-p', '--prefix', dest='prefix', type=str, required=True)
args=parser.parse_args()

make_report(output_pdf=args.output,image_dir=args.directory,mer=args.mer_size, prefix=args.prefix)

